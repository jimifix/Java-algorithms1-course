Submission
Submission time	Mon-30-Jun 17:57:39
Raw Score	92.37 / 100.00
Feedback	See the Assessment Guide for information on how to read this report.
Assessment Summary

Compilation:  PASSED
Style:        FAILED
Findbugs:     No potential bugs found.
API:          PASSED

Correctness:  31/35 tests passed
Memory:       48/49 tests passed
Timing:       24/24 tests passed

Raw score: 92.37% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]

Assessment Details

The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 3.4K Jun 30 15:50 Deque.java
-rw-r--r-- 1 3.2K Jun 30 15:50 RandomizedQueue.java
-rw-r--r-- 1  451 Jun 30 15:50 Subset.java
-rw-r--r-- 1 2.5K Jun 30 15:50 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Deque.java
*-----------------------------------------------------------
================================================================

% javac RandomizedQueue.java
*-----------------------------------------------------------
Note: RandomizedQueue.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
================================================================

% javac Subset.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Subset.java:8:15: 'while' is not followed by whitespace.
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Subset:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in Deque
*-----------------------------------------------------------
Running 15 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(), and
removeLast(). The probabilities of each operation are p1, p2, p3, and p4,
respectively.

Test 1: Calls to addFirst() and addLast() only
  *     5 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *    50 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *   500 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *  1000 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
==> passed

Test 2: Calls to addFirst() and removeFirst()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
==> passed

Test 3: Calls to addFirst() and removeLast()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
==> passed

Test 4: Calls to addLast() and removeLast()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
==> passed

Test 5: Calls to addLast() and removeFirst()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
==> passed

Test 6: Calls to addFirst(), addLast(), removeFirst(), and removeLast()
  *     5 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *    50 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *   500 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *  1000 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
==> passed

Test 7: Removing from an empty deque
  *  removeFirst()
  *  removeLast()
==> passed

Test 8: Create multiple deque objects at the same time
==> passed

Test 9: Check iterator() after calls only to addFirst()
==> passed

Test 10: Check iterator() after intermixed calls to addFirst(), addLast(),
         removeFirst(), and removeLast()
      -  student   length = 1
      -  reference length = 0
      iterator failed after applying operation 3
==> FAILED

Test 11: Create two independent iterators to same deque
==> passed

Test 12: Create Deque objects of different parameterized types
==> passed

Test 13: Check that addFirst() and addLast() each throw a NullPointerException
         when inserting null items
==> passed

Test 14: Check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 15: Check iterator() when Deque is empty
==> passed


Total: 14/15 tests passed!

================================================================

Testing methods in RandomizedQueue
*-----------------------------------------------------------
Running 17 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), and sample().
The probabilities of each operation are p1, p2, and p3, respectively.

Test 1: Calls to enqueue() (and dequeue() just to verify)
  *     5 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *    50 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *   500 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *  1000 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
==> passed

Test 2: Calls to enqueue() and dequeue()
  *     5 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *    50 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *   500 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *  1000 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *     5 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *    50 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *   500 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *  1000 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
==> passed

Test 3: Calls to enqueue() and sample()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
==> passed

Test 4: Calls to enqueue(), dequeue(), and sample()
  *     5 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *    50 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *   500 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *  1000 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
==> passed

Test 5: dequeue() and sample() from an empty randomized queue
  *  dequeue()
  *  sample()
==> passed

Test 6: Create multiple randomized queue objects at the same time
==> passed

Test 7: Check that iterator() returns correct items after a sequence of
         enqueue() operations
==> passed

Test 8: Check that iterator() returns correct items after sequence of enqueue()
        and dequeue() operations
==> passed

Test 9: Create two independent iterators to same randomized queue
  *  N = 10
     -  two iterators should return different sequence of values
  *  N = 1000
     -  two iterators should return different sequence of values
==> FAILED

Test 10: Create two iterators to different randomized queues
==> passed

Test 11: Create RandomizedQueue objects of different parameterized types
==> passed

Test 12: Check randomness of sample() by enqueueing strings, repeatedly calling
         sample(), and counting the frequency of each value.
  *  Enqueue strings A to C and sampling 1500 times
  *  Enqueue strings A to E and sampling 2500 times
  *  Enqueue strings A to H and sampling 4000 times
  *  Enqueue strings A to J and sampling 5000 times
==> passed

Test 13: Check randomness of dequeue() by enqueueing strings, repeatedly calling
         dequeue() until a specific enqueued string appears.
  *  Enqueue strings A to C and call dequeue() until A is dequeued; repeat 1500 times
  *  Enqueue strings A to E and call dequeue() until A is dequeued; repeat 2500 times
  *  Enqueue strings A to H and call dequeue() until B is dequeued; repeat 4000 times
  *  Enqueue strings A to J and call dequeue() until C is dequeued; repeat 5000 times
==> passed

Test 14: Check randomness of iterator() by enqueueing strings, getting an iterator()
         and repeatedly calling next() until a specific enqueued string appears.
  *  Enqueue strings A to C, create iterator(), and call next() until A is returned;
     Repeat 1500 times
  *  Enqueue strings A to E, create iterator(), and call next() until C is returned;
     Repeat 2500 times
  *  Enqueue strings A to H, create iterator(), and call next() until F is returned;
     Repeat 4000 times
  *  Enqueue strings A to J, create iterator(), and call next() until J is returned;
     Repeat 5000 times
==> passed

Test 15: Check that NullPointerException is thrown when inserting null items
==> passed

Test 16: Check that remove() and next() throw the specified exceptions in iterator()
     - NoSuchElementException NOT thrown for next()
==> FAILED

Test 17: Check iterator() when RandomizedQueue is empty
     java.util.NoSuchElementException: Queue is empty
     RandomizedQueue$RandomiseQueueIterator.<init>(RandomizedQueue.java:79)
     RandomizedQueue.iterator(RandomizedQueue.java:72)
     TestRandomizedQueue.test17(TestRandomizedQueue.java:691)
     TestRandomizedQueue.main(TestRandomizedQueue.java:732)

==> FAILED


Total: 14/17 tests passed!

================================================================

Testing methods in Subset
*-----------------------------------------------------------
Running 3 total tests.

Test 1: assignment inputs

% echo "A B C D E F G H I" | java Subset 3
[student solution]
G
F
H

% echo "A B C D E F G H I" | java Subset 3
[student solution]
D
B
G

% echo "AA BB BB BB BB BB CC CC " | java Subset 8
[student solution]
BB
AA
BB
BB
CC
BB
CC
BB

==> passed

Test 2: various inputs

% echo "A B C D E F G H I" | java Subset 1
[student solution]
E

% echo "A B C D E F G H I" | java Subset 5
[student solution]
G
D
F
A
H

% echo "A B C D E F G H I" | java Subset 5
[student solution]
D
H
A
F
C

% echo "A B C D E F G H I" | java Subset 9
[student solution]
F
E
A
I
G
H
B
D
C

% echo "A B C D E F G H I" | java Subset 0
[student solution]

% echo "it was the best of times it was the worst of times" | java Subset 10
[student solution]
the
was
times
worst
of
of
it
times
best
it

% echo "It was the best of times, it was the worst of times, it was ..." | java Subset 10
[student solution]
where
of
riding-coat
destined
honour
and
one
of
the
fair

% echo "AA BB BB BB BB BB CC CC " | java Subset 7
[student solution]
BB
CC
CC
BB
BB
AA
BB

==> passed

Test 3: check for randomness
  * 1000 subsets of size 1 from subset10.txt
  * 250 subsets of size 4 from subset10.txt
  * 600 subsets of size 1 from subset6.txt
  * 300 subsets of size 2 from subset6.txt
  * 800 subsets of size 1 from subset8.txt
  * 160 subsets of size 5 from subset8.txt
==> passed

Total: 3/3 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Deque
*-----------------------------------------------------------
Running 26 total tests.

Test 1a-1e: 
 Measuring total memory usage after inserting N items.

                 N        bytes
----------------------------------------------------------
=> passed        8          424         
=> passed       64         3112         
=> passed      256        12328         
=> passed     1024        49192         
=> passed     4096       196648         
==> 5/5 tests passed

 * Student memory = 48.00 N + 40.00  (R^2 = 1.000)



Test 2a-2e: Measuring total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=> passed        8          472         
=> passed       64         3160         
=> passed      256        12376         
=> passed     1024        49240         
=> passed     4096       196696         
==> 5/5 tests passed

Memory of Deque after adding N = 2^i + 1 items:
 * Student memory = 48.00 N + 40.00  (R^2 = 1.000)



Test 3a-3e: Measuring total memory usage after inserting 2N+1 items
then deleting N items.

                 N        bytes
----------------------------------------------------------
=> passed        8          472         
=> passed       64         3160         
=> passed      256        12376         
=> passed     1024        49240         
=> passed     4096       196696         
==> 5/5 tests passed

 * Student memory = 48.00 N + 40.00  (R^2 = 1.000)



Test 4a-4e: Measuring total memory usage after inserting N items 
 and then deleting all but one item.

                 N        bytes
----------------------------------------------------------
=> passed        8           88         
=> passed       64           88         
=> passed      256           88         
=> passed     1024           88         
=> passed     4096           88         
==> 5/5 tests passed

Memory of Deque after adding N = 2^i items:
 * Student memory = 88.00  (R^2 = 1.000)



Test 5a-5e: Measuring iterator memory usage after inserting N items 
 (should not grow with N).

                 N        bytes
----------------------------------------------------------
=> passed        8           32         
=> passed       64           32         
=> passed      256           32         
=> passed     1024           32         
=> passed     4096           32         
==> 5/5 tests passed

Memory of Deque iterator after adding N = 2^i items:
 * Student memory = 32.00  (R^2 = 1.000)



Test 6: Checking for loitering by adding 100 strings and deleting them:
 * loitering detected on 1 of 100 removeFirst() operations
 * loitering detected on 1 of 100 removeLast() operations
==> FAILED

Total: 25/26 tests passed!

================================================================



Computing memory of RandomizedQueue
*-----------------------------------------------------------
Running 21 total tests.

Test 1a-1d: Measuring total memory usage after inserting N integers.

                 N        bytes
----------------------------------------------------------
=> passed       64          568         
=> passed      256         2104         
=> passed     1024         8248         
=> passed     4096        32824         
==> 4/4 tests passed


 * Student memory = 8.00 N + 56.00  (R^2 = 1.000)



Test 2a-2d: Measuring total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=> passed       64         1080         
=> passed      256         4152         
=> passed     1024        16440         
=> passed     4096        65592         
==> 4/4 tests passed


 * Student memory = 16.00 N + 40.00  (R^2 = 1.000)



Test 3a-3d: Measuring total memory usage after inserting 2N+1 items
then deleting N items.

                 N        bytes
----------------------------------------------------------
=> passed       64         2104         
=> passed      256         8248         
=> passed     1024        32824         
=> passed     4096       131128         
==> 4/4 tests passed


 * Student memory = 32.00 N + 24.00  (R^2 = 1.000)



Test 4a-4d: Measuring total memory usage after inserting N items and 
 then deleting all but one item.

                 N        bytes
----------------------------------------------------------
=> passed       64           72         
=> passed      256           72         
=> passed     1024           72         
=> passed     4096           72         
==> 4/4 tests passed


 * Student memory = 72.00  (R^2 = 1.000)



Test 5a-5d: Measuring iterator memory usage after inserting N items

                 N        bytes
----------------------------------------------------------
=> passed       64           32         
=> passed      256           32         
=> passed     1024           32         
=> passed     4096           32         
==> 4/4 tests passed


 * Student   memory = 32.00  (R^2 = 1.000)



Test 6: Checking for loitering by adding 100 strings and deleting them:
==> passed

Total: 21/21 tests passed!

================================================================



******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Subset
*-----------------------------------------------------------
Running 2 total tests.

Test 1: Check that only one Deque or RandomizedQueue object is created
  * filename = subset9.txt, N = 9, k = 1
  * filename = subset9.txt, N = 9, k = 2
  * filename = subset9.txt, N = 9, k = 4
  * filename = tinyTale.txt, N = 12, k = 10
  * filename = tale.txt, N = 138653, k = 50
==> passed

Test 2: Check that maximum size of any or Deque or RandomizedQueue object
        created is <= N
  * filename = subset9.txt, N = 9, k = 1
  * filename = subset9.txt, N = 9, k = 2
  * filename = subset9.txt, N = 9, k = 4
  * filename = tinyTale.txt, N = 12, k = 10
  * filename = tale.txt, N = 138653, k = 5
  * filename = tale.txt, N = 138653, k = 50
  * filename = tale.txt, N = 138653, k = 500
  * filename = tale.txt, N = 138653, k = 5000
  * filename = tale.txt, N = 138653, k = 50000
==> passed

Test 3 (bonus): Check that maximum size of any or Deque or RandomizedQueue object
                created is <= k
  * filename = tale.txt, N = 138653, k = 5
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 50
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 500
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 5000
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 50000
    - max size of RandomizedQueue object = 138653
==> FAILED

Total: 2/2 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: addFirst(), addLast(), removeFirst(), and removeLast()

                    N  seconds
------------------------------
=> passed        1024     0.00
=> passed        4096     0.05
=> passed       16384     0.00
=> passed      128000     0.13
=> passed      256000     0.20
=> passed     1024000     1.37
==> 6/6 tests passed


N random calls to next() and hasNext() in iterator()

                    N  seconds
------------------------------
=> passed        1024     0.00
=> passed        4096     0.00
=> passed       16384     0.01
=> passed      128000     0.03
=> passed      256000     0.21
=> passed     1024000     1.27
==> 6/6 tests passed

Total: 12/12 tests passed!
================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: enqueue(), sample(), dequeue(), isEmpty(), and size()

                    N  seconds
----------------------------------
=> passed        1024     0.00
=> passed        4096     0.01
=> passed       16384     0.03
=> passed      128000     0.08
=> passed      256000     0.12
=> passed     1024000     1.10
==> 6/6 tests passed


N random calls to: next() and hasNext() from iterator()

                    N  seconds
----------------------------------
=> passed        1024     0.00
=> passed        4096     0.01
=> passed       16384     0.00
=> passed      128000     0.01
=> passed      256000     0.04
=> passed     1024000     0.58
==> 6/6 tests passed

Total: 12/12 tests passed!
================================================================



